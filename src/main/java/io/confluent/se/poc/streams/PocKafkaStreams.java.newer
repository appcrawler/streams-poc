package io.confluent.se.poc.streams;

import io.confluent.kafka.streams.serdes.avro.*;

import org.apache.kafka.streams.*;
import org.apache.kafka.streams.kstream.*;
import org.apache.kafka.common.serialization.*;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.apache.kafka.streams.state.*;
import org.apache.avro.generic.*;

import io.confluent.kafka.serializers.*;

import java.util.*;
import java.util.concurrent.CompletableFuture;

import io.confluent.se.poc.rest.*;

public class PocKafkaStreams {
  static ReadOnlyKeyValueStore<String, GenericRecord> kvStore;
  //static KeyValueStore<String, String> kvStore;

  public static void main(String[] args) throws Exception {
    PocKafkaStreams pks = new PocKafkaStreams();
    pks.start();
  }

  public void start() throws Exception {
    ApiServer restServer = new ApiServer();
    restServer.start();
    Properties settings = new Properties (); 
    settings.put(StreamsConfig.APPLICATION_ID_CONFIG,"se-tutorial-v0.1.0"); 
    settings.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
    settings.put(StreamsConfig.STATE_DIR_CONFIG, "streams-state-store");
    //settings.put("default.key.serde", Serdes.String().getClass().getName());
    //settings.put(StreamsConfig.KEY_DESERIALIZER_CLASS_CONFIG,io.confluent.kafka.serializers.KafkaAvroDeserializer.class);
    //settings.put(StreamsConfig.VALUE_DESERIALIZER_CLASS_CONFIG,io.confluent.kafka.serializers.KafkaAvroDeserializer.class);
    //final Serde<String> stringSerde = Serdes.String(); 
    //KafkaAvroSerializer<String> serializer = new KafkaAvroSerializer<>();
    //KafkaAvroDeserializer<String> deserializer = new KafkaAvroSerializer<>(String.class);
    //Serde<String> stringSerde = Serdes.serdeFrom(serializer, deserializer);


    settings.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, GenericAvroSerde.class);
    settings.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, GenericAvroSerde.class);
    settings.put("schema.registry.url", "http://localhost:8081");

    final Map<String, String> serdeConfig = Collections.singletonMap("schema.registry.url","http://localhost:8081");
    final Serde<GenericRecord> keyGenericAvroSerde = new GenericAvroSerde();
    keyGenericAvroSerde.configure(serdeConfig, true); // `true` for record keys
    final Serde<GenericRecord> valueGenericAvroSerde = new GenericAvroSerde();
    valueGenericAvroSerde.configure(serdeConfig, true); // `false` for record values

    StreamsBuilder builder = new StreamsBuilder();
    KStream<GenericRecord, GenericRecord> customers = builder.stream("CUSTOMERS_REKEY_S", Consumed.with(keyGenericAvroSerde, valueGenericAvroSerde));

    //StreamsBuilder builder = new StreamsBuilder();
    //input topic
    //KStream<String, String> customers = builder.stream("CUSTOMERS_REKEY_S",Consumed.with(stringSerde, stringSerde));
    //KStream<String, String> customers = builder.stream("CUSTOMERS_REKEY_S");

    KeyValueBytesStoreSupplier storeSupplier = Stores.persistentKeyValueStore("CustStore");

    customers.to("customers_table",Produced.with(keyGenericAvroSerde, valueGenericAvroSerde));
    KTable<String, GenericRecord> materializedCustomers = builder.table("customers_table",
                                                                 Materialized.<String, GenericRecord>as(storeSupplier)
                                                                     .withKeySerde(Serdes.String())
                                                                     .withValueSerde(valueGenericAvroSerde)                           
                                                                );

    Topology topology = builder.build();
    //System.out.println(toploogy.toString());
    KafkaStreams streams = new KafkaStreams (topology, settings); 

    CompletableFuture<KafkaStreams.State> stateFuture = new CompletableFuture<>();
    streams.setStateListener((newState, oldState) -> {
      if(stateFuture.isDone()) {
        return;
      }

      if(newState == KafkaStreams.State.RUNNING || newState == KafkaStreams.State.ERROR) {
        stateFuture.complete(newState);
      }
    });

    streams.start();

    while (stateFuture.get() != KafkaStreams.State.RUNNING) {}

    System.out.println("DIAGRAM " + streams.localThreadsMetadata());

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      streams.close(); 
    }));

    kvStore = streams.store("CustStore", QueryableStoreTypes.keyValueStore());
    //kvStore = KeyValueStore) processorContext.getStateStore("custStore");
  }

  public static GenericRecord getRecommendations(String id) throws Exception {
    return kvStore.get(id);
  }

  public static GenericRecord getCustomers(String id) throws Exception {
    return kvStore.get(id);
  }
}
